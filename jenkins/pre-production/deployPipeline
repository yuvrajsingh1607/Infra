node {
   try {
   	stage('Preparation') {
   	    slackSend channel: "#${params.channel}", color: 'good', message: "Build started for ${env.JOB_NAME} ${env.BUILD_NUMBER}"
   	 	git url: 'git@github.com:yuvrajsingh1607/oregon-qa-test.git',
    	    	branch: "${params.branch}"
  	 }
     stage('Deployment') {
        withKubeConfig([credentialsId: "k8s-config-${DEPLOYMENT_ENVIRONMENT}"]) {
         	def deploymentName= "nodejs-deployment"
    		sh "kubectl apply -f jenkins/k8s/service.yaml -n ${namespace}"
    		def deploymentFile = readYaml file: "jenkins/k8s/deployment.yaml"
    		def imageVersion = deploymentFile.spec.template.spec.containers[0].image .replace("{CONTAINER_VERSION}","${image_id}")
            deploymentFile.spec.template.spec.containers[0].image = "${imageVersion}"
            deploymentFile.spec.replicas = "${replicaCount}".toInteger()
            sh "rm jenkins/k8s/deployment.yaml"
            writeYaml file: "jenkins/k8s/deployment.yaml", data: deploymentFile
            sh "kubectl apply -f jenkins/k8s/deployment.yaml -n ${namespace}"
            sh "kubectl rollout status deploy ${deploymentName} -n ${namespace}"
    		echo "Deployment completed for  ${deploymentName}"
    		slackSend channel: "#${params.channel}", color: 'good', message: "Build completed for ${env.JOB_NAME} ${env.BUILD_NUMBER}"
		}
  	 }
	} catch(error) {
        currentBuild.result = "FAILURE"
        String recipient = "${env.NOTIFICATION_EMAIL}"
        mail subject: "${env.JOB_NAME} (${env.BUILD_NUMBER}) failed",
               body: "Build ${env.BUILD_URL} failed, Error is " + error ,
                 to: recipient,
            replyTo: recipient,
               from: 'yuvraj.singh@qardio.com'
        slackSend channel: "#${params.channel}", color: 'danger', message: "Build failed for ${env.JOB_NAME} ${env.BUILD_NUMBER}"
    }
}

